using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Roblox.Common;
using Roblox.Common.Persistence;

namespace ~NAMESPACE~
{
    ~ACCESSIBILITY~ class ~DALCLASSNAME~
    {
        private ~IDTYPE~ _ID = default(~IDTYPE~);
        ~DALFIELDS~
        ~ACCESSIBILITY~ ~IDTYPE~ ID
        {
            get { return _ID; }
            set { _ID = value; } 
        }
        ~DALPROPERTIES~
        private static string ~CONNECTIONSTRING~
        {
            get { return ~CONNECTIONSTRINGVALUE~; }
        }

        ~ACCESSIBILITY~ ~DALCLASSNAME~()
        {
        }

        ~ACCESSIBILITY~ void Delete()
        {
            if (_ID == default(~IDTYPE~))
                throw new ApplicationException("Required value not specified: ID.");

            var queryParameters = new List<SqlParameter>
            {
                new SqlParameter("@ID", _ID)
            };

            var dbInfo = new dbInfo(
                ~CONNECTIONSTRING~,
                "~DELETEPROCEDURE~",
                queryParameters
            );

            EntityHelper.DoEntityDALDelete(dbInfo);
        }
        ~ACCESSIBILITY~ void Insert()
        {
            var queryParameters = new List<SqlParameter>
            {
		        ~QUERYPARAMETERS~
            };
			
            var dbInfo = new dbInfo(
                ~CONNECTIONSTRING~,
                "~INSERTPROCEDURE~",
                new SqlParameter("@ID", SqlDbType.~IDSQLDBTYPE~),
                queryParameters
            );

            _ID = EntityHelper.DoEntityDALInsert<~IDTYPE~>(dbInfo);
        }
        ~ACCESSIBILITY~ void Update()
        {
            var queryParameters = new List<SqlParameter>
            {
		        new SqlParameter("@ID", _ID),
		        ~QUERYPARAMETERS~
            };
			
            var dbInfo = new dbInfo(
                ~CONNECTIONSTRING~,
                "~UPDATEPROCEDURE~",
                queryParameters
            );

            EntityHelper.DoEntityDALUpdate(dbInfo);
        }

        private static ~DALCLASSNAME~ BuildDAL(SqlDataReader reader)
        {
            var dal = new ~DALCLASSNAME~();

            while (reader.Read())
            {
                dal.ID = (~IDTYPE~)reader["ID"];
		        ~READERPARAMETERS~
            }

            if (dal.ID == default(~IDTYPE~))
                return null;

            return dal;
        }
        
        ~ACCESSIBILITY~ static ~DALCLASSNAME~ Get(~IDTYPE~ id)
        {
            if (id == default(~IDTYPE~))
                return null;

            var queryParameters = new List<SqlParameter>
            {
                new SqlParameter("@ID", id)
            };

            var dbInfo = new dbInfo(
                ~CONNECTIONSTRING~,
                "~GETPROCEDURE~",
                queryParameters
            );

            return EntityHelper.GetEntityDAL(dbInfo, BuildDAL);
        }
        
        ~PARAMFUNCTIONS~
    }
}